

local ETFCore = require("lib.etfCore")

local module = {}

function module.saveETF(ETFDocument, path)
    local file = fs.open(path, "w")

    file.writeLine("ETF")
    file.writeLine(ETFDocument.name)

end

function module.saveETFG(ETFDocument, path)
    local file = fs.open(path, "w")

    file.writeLine("ETFG")
    file.writeLine(ETFDocument.name)
end

function module.saveETFC(ETFDocument, path)
    local file = fs.open(path, "w")

    file.writeLine("ETFC")
    file.writeLine(ETFDocument.name)
end

local function loadContentBlock(fileStream)
    local content = {}

    local lineCountRaw = fileStream.readLine()
    if lineCountRaw == nil then return nil end
    local lineCount = tonumber(lineCountRaw)

    for i = 1, lineCount, 1 do
        table.insert(content, fileStream.readLine())
    end

    return content
end

local function loadPagesETF(file)

    local pages = {}

    repeat
        local textContent = loadContentBlock(file)
        if textContent ~= nil then
            local page = ETFCore.ETFDocument.createBlankPage()
            page.text = textContent
            
            table.insert(pages, page)
        end

    until textContent == nil

    return pages
end
    

local function loadPagesETFG(file)
    
end

local function loadPagesETFC(file)
    
end

function module.load(path)
    
    local file = fs.open(path, "r")
    local instance = ETFCore.ETFDocument:new()
    local format = file.readLine()
    instance.title = file.readLine()
    local pageLoaderMethod = nil;

    if (format:upper() == "ETF") then
        pageLoaderMethod = loadPagesETF
    elseif (format:upper() == "ETFG") then
        pageLoaderMethod = loadPagesETFG
    elseif (format:upper() == "ETFC") then
        pageLoaderMethod = loadPagesETFC
    else
        file.close();
        return nil
    end

    instance.pages = pageLoaderMethod(file)

    file.close()

    return instance

end


return module;